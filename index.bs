<pre class=metadata>
Title: Multi-Screen Window Placement
Shortname: multi-screen
Abstract: This document defines a web platform API that allows script to query the device for information about connected displays, and additional APIs to position windows relative to those displays.
Status: CG-DRAFT
URL: https://webscreens.github.io/window-placement
Level: 1
Editor: Victor Costan, Google Inc. https://google.com, costan@google.com
Editor: Joshua Bell, Google Inc. https://google.com, jsbell@google.com
Group: secondscreencg
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/screen_enumeration
Logo: logo.svg
Favicon: logo.svg
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: css no, markdown yes
</pre>

<style>
.domintro::before {
    content: 'For web developers (non-normative)';
    text-transform: initial;
}
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}
</style>

<!-- ====================================================================== -->
# Introduction # {#introduction}
<!-- ====================================================================== -->

*This section is non-normative.*


Operating systems generally allow users to connect multiple screens to a single
device and arrange them virtually to extend the overall visual workspace.

As multi-screen devices and applications become a more common and critical part
of user experiences, it becomes more important to give developers information
and tools to leverage that expanded visual environment. This document describes
some possible incremental solutions enabling web application developers to make
use of multi-screen devices, in order to facilitate discussion and seek
concensus on a path forward.

Issue: Write this section.

<!-- ====================================================================== -->
## Usage Overview ## {#usage-overview}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
## Motivating Use Cases ## {#motivations}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
# Concepts # {#concepts}
<!-- ====================================================================== -->

Issue: Finish up this section.

<!-- ====================================================================== -->
## Screen pixel ## {#concept-screen-pixel}
<!-- ====================================================================== -->

A <dfn>screen pixel</dfn> is the smallest component of a screen that can be programmed directly.
A screen pixel shows one color.

<aside class=note>
  On a liquid-crystal display (LCD), each screen pixel is made up of three components.
  Each component is a (red, green, blue) light with variable intensity.
  Reasoning about pixel components (subpixel rendering) is out of scope for this specification.
</aside>

<!-- ====================================================================== -->
## Color depth ## {#concept-color-depth}
<!-- ====================================================================== -->

A [=screen pixel=]'s <dfn>color depth</dfn> is the number of bits used to represent the color displayed by that pixel.

<aside class=note>
  Some popular rendering systems model [=screen pixels=] as having a [=color
  depth=] of 24. The 24 bits are separated into 3 groups of 8 bits used to
  represent the intensity of the (red, green, blue) subpixels of an LCD
  [=screen pixel=].


</aside>

<!-- ====================================================================== -->
## Screen area ## {#concept-screen-area}
<!-- ====================================================================== -->

A <dfn>screen area</dfn> is a rectangular two-dimensional grid of [=screen pixels=] with the same [=color depth=].

A [=screen area=] has a <dfn>width</dfn>, which is the number of [=screen pixels=] along the main dimension of the [=screen area=]'s rectangular pixel grid.

A [=screen area=] has a <dfn>height</dfn>, which is the number of [=screen pixels=] along the secondary dimension of the [=screen area=]'s rectangular pixel grid.

<aside class=note>
  The grid size is usually expressed as [=width=] x [=height=].
  For example, a 1920x1080 screen area has a grid with a [=width=] of 1920 pixels and a [=height=] of 1080 pixels.
</aside>

<!-- ====================================================================== -->
## Connected screen ## {#concept-connected-screen}
<!-- ====================================================================== -->

The computer system hosting the user agent presents information using one or more <dfn>connected screens</dfn>.

A computer system's [=connected screens=] may change while a user agent is running.

A [=connected screen=] has a [=screen area=], which is used to present information to the user.

<!-- ====================================================================== -->
## Available screen area ## {#concept-available-screen-area}
<!-- ====================================================================== -->

Web applications cannot assume that a [=connected screen=]'s [=screen area=] is entirely available to them.
The operating system hosting the user agent may reserve some of the [=screen area=] for its own user interface, and the user agent's chrome may be taking some of the [=screen area=].

The <dfn>available screen area</dfn> of a [=connected screen=] is a subset of the [=screen area=] that is entirely available for web applications.
The rectangle's edges are parallel to the [=screen area=] edges.

The <dfn>available width</dfn> of a [=connected screen=] is the [=width=] of the [=connected screen=]'s [=available screen area=].

The <dfn>available height</dfn> of a [=connected screen=] is the [=height=] of the [=connected screen=]'s [=available screen area=].

<!-- ====================================================================== -->
## System screen area ## {#concept-system-screen-area}
<!-- ====================================================================== -->

TODO: Describe the virtual screen area made up of the multiple physical screens.


<!-- ====================================================================== -->
## Internal screen ## {#concept-internal-screen}
<!-- ====================================================================== -->

Each [=connected screen=] may be designated as <dfn>internal</dfn> or <dfn>external</dfn>.

[=External=] screens are manufactured separately from the computer systems they are connected to.
It is not unusual for an [=external=] screen to be disconnected from one computer system and connected to a different computer system.

[=Internal=] screens are usually attached to a computer system at manufacturing time.
[=Internal=] screens and are not intended to be detached by users.
However, [=internal=] [=connected screens=] may still appear and disappear while the user agent is running.

<aside class=note>
  A laptop has an [=internal=] screen and an input device.
  A laptop might be used while opened, with its [=internal=] screen powered on.
  However, a laptop might also be used while closed, where its [=internal=] screen is powered off.

  A laptop might be opened and closed while a user agent is running.
  In this case, the [=internal=] screen appears as a [=connected screen=] when the laptop is opened.
  The [=internal=] [=connected screen=] disappears when the laptop is closed.
</aside>

<!-- ====================================================================== -->
## Primary screen ## {#concept-primary-screen}
<!-- ====================================================================== -->

The computer system hosting the user agent has exactly one <dfn>primary</dfn> [=connected screen=]. All the other [=connected screens|connected screen=] are considered <dfn>secondary</dfn>.

<aside class=note>
  The primary connected screen typically hosts the operating system's user interface for task management, such as Windows' task bar and macOS' Dock.
</aside>

A [=connected screen=]'s [=primary=] / [=secondary=] designation may change while the user agent is running.

<aside class=note>
  Most operating systems let the user choose the primary connected screen using a management user interface, such as Windows' Control Panel and macOS' Preferences application.
</aside>

<!-- ====================================================================== -->
## Touch support ## {#concept-touch-support}
<!-- ====================================================================== -->

A [=connected screen=] may have <dfn>touch support</dfn>.

[=Touch support=] is usually implemented by layering a touch sensor over the [=screen area=].

<!-- ====================================================================== -->
# API # {#api}
<!-- ====================================================================== -->

<div class="domintro note">

    : const multi = await {{Window/isMultiScreen()}};

    :: Returns whether the device has multiple connected screens on success. User agents can prompt for permission.
};

</div>

<xmp class=idl>
partial interface Window {
  [SecureContext]
  Promise<boolean> isMultiScreen();
};
</xmp>

<div algorithm>

The <dfn method for=Window>isMultiScreen()</dfn> method steps are:

1. Let |promise| be [=/a new promise=].

1. Run these steps [=/in parallel=]:

    1. [=/Resolve=] |promise| with true if the computer system has more than one [=connected screen=], and false otherwise.

1. Return |promise|.

</div>

Issue: Permission check for above?


<xmp class=idl>
partial interface Window {
  // NEW: Returns a snapshot of information about connected screens on success.
  [SecureContext]
  Promise<sequence<ScreenInfo>> getScreens();  // UAs may prompt for permission.
};


dictionary ScreenInfo {
  // Shape matches https://drafts.csswg.org/cssom-view/#the-screen-interface
  long availWidth;
  long availHeight;
  long width;
  long height;
  unsigned long colorDepth;
  unsigned long pixelDepth;

  // Shape roughly matches https://w3c.github.io/screen-orientation
  OrientationType orientationType;  // Orientation type, e.g. "portrait-primary"
  unsigned short orientationAngle;  // Orientation angle, e.g. 0

  // Shape matches https://developer.mozilla.org/en-US/docs/Web/API/Screen
  // Critical for understanding relative screen layouts for window placement.
  // Distances from a multi-screen origin (e.g. primary screen top left) to the:
  long left;       // Left edge of the screen area, e.g. 1920
  long top;        // Top edge of the screen area, e.g. 0
  long availLeft;  // Left edge of the available screen area, e.g. 1920
  long availTop;   // Top edge of the available screen area, e.g. 0

  // New properties critical for many multi-screen window placement use cases.
  boolean primary;
  boolean internal;
  float scaleFactor;     // Ratio between physical pixels and device
                         // independent pixels for this screen, e.g. 2
                         // Useful for placing windows on screens with optimal
                         // scaling and appearances for a given application.
  DOMString id;          // A temporary, generated per-origin unique ID; resets
                         // when cookies are deleted. Useful for persisting user
                         // window placements preferences for certain screens.
  boolean touchSupport;
};
</xmp>

<div algorithm>

The <dfn method for=Window>getScreens()</dfn> method steps are:

1. Let |promise| be [=/a new promise=].

1. Run the following steps [=/in parallel=]:

    1. Let |screens| be a new [=/list=].

    1. For each |screen| [=connected screen=].

        1. Let |info| be a new {{ScreenInfo}} dictionary describing |screen|.

        1. [=list/Append=] |info| to |screens|.

    1. [=/Resolve=] |promise| with |screens|.


1. Return |promise|.

</div>

Issue: Add permission check to the above.


<!-- ====================================================================== -->
## Events ## {#events}
<!-- ====================================================================== -->


Issue: Define when screens change.

When blah blah blah happens, fire an event with type <dfn event for=Window>`screenschange`</dfn> at blah blah.


<xmp class=idl>
partial interface Window {
  // NEW: An event fired when the connected screens or their properties change.
  [SecureContext]
  attribute EventHandler onscreenschange;
};
</xmp>


The <dfn attribute for=Window>onscreenschange</dfn> attribute is an [=/event handler IDL attribute=] whose [=/event handler event type=] is <a event>`screenschange`</a>.


<!-- ====================================================================== -->
## Other Specifications ## {#other-specs}
<!-- ====================================================================== -->

Issue: File bug against permissions spec, since partial enums aren't a thing.
<xmp class=idl>
enum PermissionName {
  // ...
  "window-placement",
  // ...
};
</xmp>

Issue: Push this into other spec?
<xmp class=idl>
dictionary FullscreenOptions {
  FullscreenNavigationUI navigationUI = "auto";

  // NEW: An optional way to request a specific screen for element fullscreen.
  ScreenInfo screen;
};
</xmp>



<!-- ====================================================================== -->
# Security Considerations # {#security}
<!-- ====================================================================== -->

Issue: Write this section.


<!-- ====================================================================== -->
# Privacy Considerations # {#privacy}
<!-- ====================================================================== -->

Issue: Write this section.


<!-- ====================================================================== -->
# Accessibility Considerations # {#a11y}
<!-- ====================================================================== -->

Issue: Write this section.


<!-- ====================================================================== -->
# Internationalization Considerations # {#i18n}
<!-- ====================================================================== -->

Issue: Write this section.


<!-- ====================================================================== -->
# Acknowledgements # {#acknowledgements}
<!-- ====================================================================== -->

Many thanks to

Anssi Kostiainen,
Chris Terefinko,
Domenic Denicola,
Jonathan Garbee,
Kenneth Rohde Christiansen,
L. David Baron,
Lukasz Olejnik,
Marijn Kruisselbrink,
Matt Giuca,
Michael Ketting,
Michael Wasserman,
Nadav Sinai,
Peter Linss,
Staphany Park,
Theresa O'Connor,
Thomas Nattestad,
Thomas Steiner,

for helping craft this proposal.

Issue: Ensure we didn't forget anyone!

Special thanks to Tab Atkins, Jr. for creating and maintaining [Bikeshed](https://github.com/tabatkins/bikeshed), the specification authoring tool used to create this document, and for his general authoring advice.
